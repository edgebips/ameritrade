#!/usr/bin/env python3
"""Produce instrument detail.
"""
__author__ = 'Martin Blais <blais@furius.ca>'

import argparse
import logging
import pprint
import json
import sys

import petl
petl.config.look_style = 'minimal'

import ameritrade


def main():
    """Compute various vol estimates."""
    parser = argparse.ArgumentParser(description=__doc__.strip())

    parser.add_argument('symbol', action='store',
                        help="TD symbol or CUSIP symbol to look up.")

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-s', help='Symbol regex search',
                       dest='projection',
                       action='store_const', const='symbol-regex')
    group.add_argument('-d', help='Description regex search',
                       dest='projection',
                       action='store_const', const='desc-regex')
    group.add_argument('-f', help='Fundamental lookup',
                       dest='projection',
                       action='store_const', const='fundamental')

    ameritrade.add_args(parser)
    args = parser.parse_args()
    config = ameritrade.config_from_args(args)
    api = ameritrade.open(config)

    # Set default projection.
    if args.projection is None:
        args.projection = 'symbol-search'

    # The regex search is a fullmatch search, where a provided initial '^' will
    # fail. Turn it into a partial match search unless otherwise specified.
    term = args.symbol
    if args.projection.endswith('-regex'):
        if term.startswith('^'):
            term = term[1:]
        else:
            term = '.*' + term
        if not term.endswith('$'):
            term = term + '.*'

    instmap = api.SearchInstruments(symbol=term,
                                    projection=args.projection)

    if not instmap:
        print("(EMPTY)", file=sys.stderr)
        return

    if args.projection == 'fundamental':
        for inst in instmap.values():
            fund = inst.pop('fundamental')
            inst.update(fund)
        table = (petl.fromdicts(instmap.values())
                 .transpose())
    else:
        table = petl.fromdicts(instmap.values())
    print(table.lookallstr())


if __name__ == '__main__':
    main()
